// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ClassVisitSignupGenerator;
//
//    var baseObject = BaseObject.FromJson(jsonString);

namespace ClassVisitSignupGenerator
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BaseObject
    {
        [JsonProperty("success")]
        public bool Success { get; set; }

        [JsonProperty("totalCount")]
        public long TotalCount { get; set; }

        [JsonProperty("data")]
        public List<Datum> Data { get; set; }

        [JsonProperty("pageOffset")]
        public long PageOffset { get; set; }

        [JsonProperty("pageMaxSize")]
        public long PageMaxSize { get; set; }

        [JsonProperty("sectionsFetchedCount")]
        public long SectionsFetchedCount { get; set; }

        [JsonProperty("pathMode")]
        public string PathMode { get; set; }

        [JsonProperty("searchResultsConfigs")]
        public object SearchResultsConfigs { get; set; }

        [JsonProperty("ztcEncodedImage")]
        public string ZtcEncodedImage { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("term")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Term { get; set; }

        [JsonProperty("termDesc")]
        public string TermDesc { get; set; }

        [JsonProperty("courseReferenceNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CourseReferenceNumber { get; set; }

        [JsonProperty("partOfTerm")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PartOfTerm { get; set; }

        [JsonProperty("courseNumber")]
        public string CourseNumber { get; set; }

        [JsonProperty("subject")]
        public string Subject { get; set; }

        [JsonProperty("subjectDescription")]
        public string SubjectDescription { get; set; }

        [JsonProperty("sequenceNumber")]
        public string SequenceNumber { get; set; }

        [JsonProperty("campusDescription")]
        public string CampusDescription { get; set; }

        [JsonProperty("scheduleTypeDescription")]
        public string ScheduleTypeDescription { get; set; }

        [JsonProperty("courseTitle")]
        public string CourseTitle { get; set; }

        [JsonProperty("creditHours")]
        public long? CreditHours { get; set; }

        [JsonProperty("maximumEnrollment")]
        public long MaximumEnrollment { get; set; }

        [JsonProperty("enrollment")]
        public long Enrollment { get; set; }

        [JsonProperty("seatsAvailable")]
        public long SeatsAvailable { get; set; }

        [JsonProperty("waitCapacity")]
        public long WaitCapacity { get; set; }

        [JsonProperty("waitCount")]
        public long WaitCount { get; set; }

        [JsonProperty("waitAvailable")]
        public long WaitAvailable { get; set; }

        [JsonProperty("crossList")]
        public object CrossList { get; set; }

        [JsonProperty("crossListCapacity")]
        public object CrossListCapacity { get; set; }

        [JsonProperty("crossListCount")]
        public object CrossListCount { get; set; }

        [JsonProperty("crossListAvailable")]
        public object CrossListAvailable { get; set; }

        [JsonProperty("creditHourHigh")]
        public long? CreditHourHigh { get; set; }

        [JsonProperty("creditHourLow")]
        public long CreditHourLow { get; set; }

        [JsonProperty("creditHourIndicator")]
        public string CreditHourIndicator { get; set; }

        [JsonProperty("openSection")]
        public bool OpenSection { get; set; }

        [JsonProperty("linkIdentifier")]
        public string LinkIdentifier { get; set; }

        [JsonProperty("isSectionLinked")]
        public bool IsSectionLinked { get; set; }

        [JsonProperty("subjectCourse")]
        public string SubjectCourse { get; set; }

        [JsonProperty("faculty")]
        public List<Faculty> Faculty { get; set; }

        [JsonProperty("meetingsFaculty")]
        public List<MeetingsFaculty> MeetingsFaculty { get; set; }

        [JsonProperty("reservedSeatSummary")]
        public object ReservedSeatSummary { get; set; }

        [JsonProperty("sectionAttributes")]
        public List<SectionAttribute> SectionAttributes { get; set; }
    }

    public partial class Faculty
    {
        [JsonProperty("bannerId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long BannerId { get; set; }

        [JsonProperty("category")]
        public object Category { get; set; }

        [JsonProperty("class")]
        public string Class { get; set; }

        [JsonProperty("courseReferenceNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CourseReferenceNumber { get; set; }

        [JsonProperty("displayName")]
        public string DisplayName { get; set; }

        [JsonProperty("emailAddress")]
        public string EmailAddress { get; set; }

        [JsonProperty("primaryIndicator")]
        public bool PrimaryIndicator { get; set; }

        [JsonProperty("term")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Term { get; set; }
    }

    public partial class MeetingsFaculty
    {
        [JsonProperty("category")]
        public string Category { get; set; }

        [JsonProperty("class")]
        public string Class { get; set; }

        [JsonProperty("courseReferenceNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CourseReferenceNumber { get; set; }

        [JsonProperty("faculty")]
        public List<object> Faculty { get; set; }

        [JsonProperty("meetingTime")]
        public MeetingTime MeetingTime { get; set; }

        [JsonProperty("term")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Term { get; set; }
    }

    public partial class MeetingTime
    {
        [JsonProperty("beginTime")]
        public string BeginTime { get; set; }

        [JsonProperty("building")]
        public string Building { get; set; }

        [JsonProperty("buildingDescription")]
        public string BuildingDescription { get; set; }

        [JsonProperty("campus")]
        public string Campus { get; set; }

        [JsonProperty("campusDescription")]
        public string CampusDescription { get; set; }

        [JsonProperty("category")]
        public string Category { get; set; }

        [JsonProperty("class")]
        public string Class { get; set; }

        [JsonProperty("courseReferenceNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CourseReferenceNumber { get; set; }

        [JsonProperty("creditHourSession")]
        public long CreditHourSession { get; set; }

        [JsonProperty("endDate")]
        public string EndDate { get; set; }

        [JsonProperty("endTime")]
        public string EndTime { get; set; }

        [JsonProperty("friday")]
        public bool Friday { get; set; }

        [JsonProperty("hoursWeek")]
        public double HoursWeek { get; set; }

        [JsonProperty("meetingScheduleType")]
        public string MeetingScheduleType { get; set; }

        [JsonProperty("meetingType")]
        public string MeetingType { get; set; }

        [JsonProperty("meetingTypeDescription")]
        public string MeetingTypeDescription { get; set; }

        [JsonProperty("monday")]
        public bool Monday { get; set; }

        [JsonProperty("room")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Room { get; set; }

        [JsonProperty("saturday")]
        public bool Saturday { get; set; }

        [JsonProperty("startDate")]
        public string StartDate { get; set; }

        [JsonProperty("sunday")]
        public bool Sunday { get; set; }

        [JsonProperty("term")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Term { get; set; }

        [JsonProperty("thursday")]
        public bool Thursday { get; set; }

        [JsonProperty("tuesday")]
        public bool Tuesday { get; set; }

        [JsonProperty("wednesday")]
        public bool Wednesday { get; set; }
    }

    public partial class SectionAttribute
    {
        [JsonProperty("class")]
        public string Class { get; set; }

        [JsonProperty("code")]
        public string Code { get; set; }

        [JsonProperty("courseReferenceNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CourseReferenceNumber { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("isZTCAttribute")]
        public bool IsZtcAttribute { get; set; }

        [JsonProperty("termCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TermCode { get; set; }
    }

    public partial class BaseObject
    {
        public static BaseObject FromJson(string json) => JsonConvert.DeserializeObject<BaseObject>(json, ClassVisitSignupGenerator.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BaseObject self) => JsonConvert.SerializeObject(self, ClassVisitSignupGenerator.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
